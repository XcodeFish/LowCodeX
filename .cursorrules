# 项目特定规则
语言：请一直使用中文跟我交流
技术栈：尽量使用项目已有的技术栈和库，避免引入不必要的依赖
安全注意事项：避免硬编码敏感信息，注意数据验证和防止常见安全漏洞。
项目运行请使用pnpm, frontend作为前端项目目录 backend作为后端项目目录

# 通用编码规范
代码风格：遵循一致的缩进风格（使用空格或Tab），保持一致的括号和空格使用方式。
命名规范：使用有意义的变量和函数名，避免使用单个字母或无意义的命名。
注释规范：在函数和复杂逻辑处添加注释，解释代码的用途和实现。
文件组织：遵循views 和 业务逻辑分离的原则
公共组件：尽量使用项目中已有的公共组件，避免重复造轮子，多设计公共组件，方便后续维护
api接口规范： 开发api接口前，请先在types目录下定义该模块接口 请求参数 返回参数 请求体 响应体 等类型定义 严格遵守类型定义

# 代码质量规范
1. 代码可读性：确保代码易于理解，避免过长的函数和复杂的逻辑。
2. 代码可维护性：使用有意义的变量名和函数名，方便后续维护。
3. 代码可扩展性：考虑代码的扩展性，避免重复代码，使用函数和模块化代码。
4. 代码健壮性：处理异常情况，避免崩溃，提供错误信息。
5. 代码性能：优化性能，避免不必要的计算和操作。
6. 代码安全性：避免安全漏洞，使用安全的编码实践。

# 项目特定编码规范
1. 请严格遵守Typescript的类型定义规范
2. 请严格遵守Typescript的函数定义规范
3. 请严格遵守Typescript的变量定义规范
4. 请严格遵守Typescript的接口定义规范
5. 请严格遵守Typescript的类定义规范
6. 请严格遵守Typescript的枚举定义规范
7. 请严格遵守Typescript的常量定义规范
8. 请严格遵守Typescript的类型推断规范
9. 请严格遵守Typescript的类型转换规范
10. 请严格遵守Typescript的类型断言规范
11. 请严格遵守Typescript的类型别名规范
12. 请严格遵守Typescript的类型推断规范
13. 请严格遵守Typescript的类型推断规范
14. 请严格遵守Typescript的类型推断规范

# 协作规范
提交规范：遵循约定的分支管理策略，使用Git进行版本控制。
代码审查：进行代码审查，确保代码质量。
文档更新： 代码更改及时更新文档。

# AI辅助规范
生成代码：在生成代码之前，先看下项目中是否已经有类似的代码，如果有，请参考已有代码，保持风格一致，如果没有，请根据需求生成代码。
生成代码期间，如果代码内容太多，可以分成几次编写，不要一次性生成太多代码超出token限制

# 项目结构
创建目录以及文件 先看项目结构 保持一致









